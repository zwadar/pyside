<?xml version="1.0"?>
<!--
/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of PySide2.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or (at your option) the GNU General
** Public license version 3 or any later version approved by the KDE Free
** Qt Foundation. The licenses are as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-2.0.html and
** https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
-->
<typesystem package="PySide2.QtMultimedia">
  <load-typesystem name="typesystem_core.xml" generate="no" />
  <load-typesystem name="typesystem_gui.xml" generate="no" />
  <load-typesystem name="typesystem_network.xml" generate="no" />

  <namespace-type name="QAudio">
      <enum-type name="Error"/>
      <enum-type name="Mode"/>
      <enum-type name="State"/>
  </namespace-type>

  <value-type name="QVideoSurfaceFormat">
      <enum-type name="Direction"/>
      <enum-type name="YCbCrColorSpace"/>
  </value-type>
  <object-type name="QAbstractVideoBuffer">
      <enum-type name="HandleType"/>
      <enum-type name="MapMode"/>
      <modify-function signature="map(QAbstractVideoBuffer::MapMode, int*, int*)" remove="all"/>
      <!-- TODO: discuss a way to have this working with the virtual method.
      <modify-function signature="map(QAbstractVideoBuffer::MapMode, int*, int*)">
          <modify-argument index="0">
              <replace-type modified-type="PyObject"/>
          </modify-argument>
          <modify-argument index="2">
              <remove-argument/>
          </modify-argument>
          <modify-argument index="3">
              <remove-argument/>
          </modify-argument>
          <inject-code class="target" position="beginning">
              <insert-template name="fix_arg,int*,int*"/>
          </inject-code>
      </modify-function>
      -->
      <!-- TODO: PYSIDE-354, arrays are not supported -->
      <modify-function signature="mapPlanes(QAbstractVideoBuffer::MapMode,int*,Array,Array)" remove="all"/>
  </object-type>
  <object-type name="QAbstractVideoSurface">
      <enum-type name="Error"/>
  </object-type>
  <object-type name="QVideoFrame">
      <enum-type name="FieldType"/>
      <enum-type name="PixelFormat"/>
  </object-type>

  <value-type name="QAudioFormat">
      <enum-type name="Endian"/>
      <enum-type name="SampleType"/>
  </value-type>
  <value-type name="QAudioDeviceInfo"/>
  <object-type name="QAbstractAudioDeviceInfo"/>

  <object-type name="QAbstractAudioOutput">
    <modify-function signature="start()">
      <modify-argument index="return">
        <define-ownership class="target" owner="c++"/>
      </modify-argument>
    </modify-function>
    <modify-function signature="start(QIODevice *)">
      <modify-argument index="1">
        <define-ownership class="target" owner="c++"/>
      </modify-argument>
    </modify-function>
  </object-type>

  <object-type name="QAbstractAudioInput">
    <modify-function signature="start()">
      <modify-argument index="return">
        <define-ownership class="target" owner="c++"/>
      </modify-argument>
    </modify-function>
    <modify-function signature="start(QIODevice *)">
      <modify-argument index="1">
        <define-ownership class="target" owner="c++"/>
      </modify-argument>
    </modify-function>
  </object-type>

  <object-type name="QAudioInput">
    <modify-function signature="start()">
      <modify-argument index="return">
        <define-ownership class="target" owner="c++"/>
      </modify-argument>
    </modify-function>
    <modify-function signature="start(QIODevice*)">
      <modify-argument index="1">
        <define-ownership class="target" owner="c++"/>
      </modify-argument>
    </modify-function>
  </object-type>

  <object-type name="QAudioOutput">
    <modify-function signature="start()">
      <modify-argument index="return">
        <define-ownership class="target" owner="c++"/>
      </modify-argument>
    </modify-function>
    <modify-function signature="start(QIODevice*)">
      <modify-argument index="1">
        <define-ownership class="target" owner="c++"/>
      </modify-argument>
    </modify-function>
  </object-type>

</typesystem>
